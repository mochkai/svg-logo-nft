// We require the Hardhat Runtime Environment explicitly here. This is optional
// but useful for running the script in a standalone fashion through `node <script>`.
//
// When running the script with `npx hardhat run <script>` you'll find the Hardhat
// Runtime Environment's members available in the global scope.
import { ethers } from "hardhat";
import { readFileSync } from "fs";
import * as readline from "readline";
import * as util from "util";
import { AutoGen } from "../gen/autoGen";

async function main() {
  const [deployer] = await ethers.getSigners();
  const ipfsGateway = 'https://infura-ipfs.io/ipfs/';
  const updateAddress = '0x944f6531455EFAAA3e533811625BB727840c1717';
  let jsonHash = 'QmWm6bxaKNeAQGkVoGeLkCVYjEu415Vyw4kcJtz5sbKD21';

  console.log("Checking contracts with the account:", deployer.address);

  const MKLContract = await ethers.getContractFactory("MochkaiLogo");

  let contract: any = null;

  contract = await MKLContract.attach(updateAddress);

  await contract.deployed();

  console.log("Found contract with address : ", contract.address);

  const supply = (await contract.getMaxSupply()).toNumber();

  if (!jsonHash) {
    let gen = new AutoGen(supply, {
      name: "SVG Logo Upated",
      description: "This logo has been autogenerated by Mochkai's script. If you would like to see it live chack it out on twitch!! https://www.twitch.tv/mochkai",
      baseFolder: "/mochkai-logo/",
      fileNamePrefix: "logo_"
    });

    await gen.initIPFS();
    gen.setBaseSVG('assets/baseSVG.svg');
    gen.generateMetadataAttributes();
    await gen.generateMetadata();
    jsonHash = await gen.generateJsonFiles();

    console.log(await contract.updateBaseURI(ipfsGateway + jsonHash + "/"));

    for (let i = 1; i <= supply; i++) {
      const paddedNumber = i.toString().padStart(supply.toString().length, "0");
      console.log(await contract.updateTokenMetadata(i, `logo_${paddedNumber}.json`));
    }
  } else {
    console.log(await contract.updateBaseURI(ipfsGateway + jsonHash + "/"));
  }

  for (let i = 1; i <= supply; i++) {
    console.log(await contract.tokenURI(i));
  }

}

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});
